using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.PropertyAccessor.Tests;

[TestFixture]
public class PropertyAccessorGeneratorTests
{
    private static void Assert(string sourceCode, string expected)
    {
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.PropertyAccessor.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        foreach (var diagnostic in compilation.GetDiagnostics())
        {
            Console.WriteLine(diagnostic);
        }

        var generator = new PropertyAccessorGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var actual = generatedSources.Length > 2 ? generatedSources[2].SourceText.ToString() : "";

        NUnit.Framework.Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void GetterAttribute_OnField_ShouldGenerateGetter()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Foo
            {
                private int _answer0 = 42;

                [Getter]
                private int _answer1 = 42;

                [Getter]
                protected int m_answer2 = 42;

                [Getter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1;
                    }

                    public int Answer2
                    {
                        get => m_answer2;
                    }

                    public int Answer3
                    {
                        get => answer3;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void SetterAttribute_OnField_ShouldGenerateSetter()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Foo
            {
                private int _answer0 = 42;

                [Setter]
                private int _answer1 = 42;

                [Setter]
                protected int m_answer2 = 42;

                [Setter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        set => _answer1 = value;
                    }

                    public int Answer2
                    {
                        set => m_answer2 = value;
                    }

                    public int Answer3
                    {
                        set => answer3 = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void GetterAndSetterAttribute_OnField_ShouldGenerateGetterAndSetter()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public class Bar<TValue>;

            public partial class Foo<T>
            {
                [Getter, Setter]
                private Bar<T> _answer;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo<T>
                {
                    public global::Macaron.PropertyAccessor.Tests.Bar<T> Answer
                    {
                        get => _answer;
                        set => _answer = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void SetterAttribute_OnReadOnlyField_ShouldNotGenerateSetter()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Foo
            {
                [Getter, Setter]
                private readonly int _answer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer;
                    }
                }
            }

            """
        );
    }
}
