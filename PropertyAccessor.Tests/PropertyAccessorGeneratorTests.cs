using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.PropertyAccessor.Tests;

[TestFixture]
public class PropertyAccessorGeneratorTests
{
    private static void Assert(string sourceCode, string expected)
    {
        var attributeAssembly = typeof(SetterAttribute).Assembly;
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Append(attributeAssembly)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.PropertyAccessor.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        foreach (var diagnostic in compilation.GetDiagnostics())
        {
            Console.WriteLine(diagnostic);
        }

        var generator = new PropertyAccessorGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var actual = generatedSources.Length > 0 ? generatedSources[0].SourceText.ToString() : "";

        foreach (var diagnostic in result.Diagnostics)
        {
            Console.WriteLine(diagnostic);
        }

        NUnit.Framework.Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void ShouldNotGenerateProperty_WhenAutoPropertyAttributeIsMissing()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Foo
            {
                [Getter]
                private int _answer = 42;
            }
            """,
            expected: ""
        );
    }

    [Test]
    public void ShouldGenerateGetter_WhenGetterAttributeIsPresentOnField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private int _answer0 = 42;

                [Getter]
                private int _answer1 = 42;

                [Getter]
                protected int m_answer2 = 42;

                [Getter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1;
                    }

                    public int Answer2
                    {
                        get => m_answer2;
                    }

                    public int Answer3
                    {
                        get => answer3;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldGenerateSetter_WhenSetterAttributeIsPresentOnField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private int _answer0 = 42;

                [Setter]
                private int _answer1 = 42;

                [Setter]
                protected int m_answer2 = 42;

                [Setter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        set => _answer1 = value;
                    }

                    public int Answer2
                    {
                        set => m_answer2 = value;
                    }

                    public int Answer3
                    {
                        set => answer3 = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldGenerateGetterAndSetter_WhenBothAttributesArePresentOnField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public class Bar<TValue>
            {
            }

            [AutoProperty]
            public partial struct Foo<T>
            {
                [Getter, Setter]
                private Bar<T> _answer;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial struct Foo<T>
                {
                    public global::Macaron.PropertyAccessor.Tests.Bar<T> Answer
                    {
                        get => _answer;
                        set => _answer = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldNotGenerateSetter_WhenFieldIsReadOnly()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial record Foo
            {
                [Getter, Setter]
                private readonly int _answer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial record Foo
                {
                    public int Answer
                    {
                        get => _answer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldGenerateAccessors_WithCustomAccessModifierPrefixAndNamingRule()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(accessModifier: PropertyAccessModifier.Protected, prefix: "m", namingRule: PropertyNamingRule.CamelCase)]
            public partial class Foo
            {
                [Getter]
                public int mAnswer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    protected int answer
                    {
                        get => mAnswer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldOverrideClassLevelSettings_WhenAutoPropertyAttributeIsPresentOnField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(accessModifier: PropertyAccessModifier.Protected, prefix: "m", namingRule: PropertyNamingRule.CamelCase)]
            public partial class Foo
            {
                [AutoProperty(prefix: "_"), Getter]
                public string _bar = "bar";

                [AutoProperty(accessModifier: PropertyAccessModifier.Private, prefix: "m_", namingRule: PropertyNamingRule.PascalCase), Getter, Setter]
                public int m_answer = 42;

                [Getter]
                public int mAnswer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    protected string bar
                    {
                        get => _bar;
                    }

                    private int Answer
                    {
                        get => m_answer;
                        set => m_answer = value;
                    }

                    protected int answer
                    {
                        get => mAnswer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldGenerateGetter_WhenFieldTypeIsIReadOnlyProperty()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly IReadOnlyProperty<int> _answer1 = null!;
                private readonly IReadOnlyProperty<Foo, int> _answer2 = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1.Get(this);
                    }

                    public int Answer2
                    {
                        get => _answer2.Get(this);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldGenerateGetterAndSetter_WhenFieldTypeIsIReadWriteProperty()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly IReadWriteProperty<int> _answer1 = null!;
                private readonly IReadWriteProperty<Foo, int> _answer2 = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1.Get(this);
                        set => _answer1.Set(this, value);
                    }

                    public int Answer2
                    {
                        get => _answer2.Get(this);
                        set => _answer2.Set(this, value);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldNotGenerateProperty_WhenFieldTypeIsIReadOnlyPropertyWithoutReadonlyModifier()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private IReadOnlyProperty<int> _wrongAnswer = null!;
                private readonly IReadOnlyProperty<int> _answer = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer.Get(this);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldNotGenerateProperty_WhenFieldTypeIsIReadWritePropertyWithoutReadonlyModifier()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private IReadWriteProperty<int> _wrongAnswer = null!;
                [Getter, Setter]
                private readonly IReadWriteProperty<int> _answer = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer.Get(this);
                        set => _answer.Set(this, value);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void ShouldNotGenerateProperty_WhenGeneratedPropertyNameIsEmpty()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly int _ = null!;
            }
            """,
            expected: ""
        );
    }
}
