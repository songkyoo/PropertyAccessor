using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.PropertyAccessor.Tests;

[TestFixture]
public class PropertyAccessorGeneratorTests
{
    private static void AssertGeneratedCode(
        string sourceCode,
        string expected,
        out ImmutableArray<Diagnostic> diagnostics
        )
    {
        (diagnostics, var generatedCode) = CompileAndGetResults(sourceCode);

        foreach (var diagnostic in diagnostics)
        {
            Console.WriteLine(diagnostic);
        }

        Assert.That(generatedCode.ReplaceLineEndings(), Is.EqualTo(expected.ReplaceLineEndings()));
    }

    private static void AssertGeneratedCode(
        string sourceCode,
        string expected
    )
    {
        var (diagnostics, generatedCode) = CompileAndGetResults(sourceCode);

        foreach (var diagnostic in diagnostics)
        {
            Console.WriteLine(diagnostic);
        }

        Assert.That(generatedCode.ReplaceLineEndings(), Is.EqualTo(expected.ReplaceLineEndings()));
    }

    private static (ImmutableArray<Diagnostic> diagnostics, string generatedCode) CompileAndGetResults(string sourceCode)
    {
        var attributeAssembly = typeof(SetterAttribute).Assembly;
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Append(attributeAssembly)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.PropertyAccessor.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        var generator = new PropertyAccessorGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var generatedCode = generatedSources.Length > 0 ? generatedSources[0].SourceText.ToString() : "";

        var allDiagnostics = compilation.GetDiagnostics()
            .Concat(result.Diagnostics)
            .ToImmutableArray();

        return (allDiagnostics, generatedCode);
    }

    [Test]
    public void Should_NotGenerateProperty_When_ClassIsNotMarkedWithAutoProperty()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Foo
            {
                [Getter]
                private int _answer = 42;
            }
            """,
            expected: ""
        );
    }

    [Test]
    public void Should_GenerateGetter_When_FieldIsMarkedWithGetterAttribute()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private int _answer0 = 42;

                [Getter]
                private int _answer1 = 42;

                [Getter]
                protected int m_answer2 = 42;

                [Getter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1;
                    }

                    public int Answer2
                    {
                        get => m_answer2;
                    }

                    public int Answer3
                    {
                        get => answer3;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateSetter_When_FieldIsMarkedWithSetterAttribute()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private int _answer0 = 42;

                [Setter]
                private int _answer1 = 42;

                [Setter]
                protected int m_answer2 = 42;

                [Setter]
                public int answer3 = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        set => _answer1 = value;
                    }

                    public int Answer2
                    {
                        set => m_answer2 = value;
                    }

                    public int Answer3
                    {
                        set => answer3 = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateGetterAndSetter_When_FieldHasGetterAndSetterAttributes()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System.Collections.Generic;

            namespace Macaron.PropertyAccessor.Tests;

            public sealed record Bar;

            public class Bar<TValue>
            {
            }

            [AutoProperty]
            public partial struct Foo<T>
            {
                [Getter, Setter]
                private IReadOnlyList<Bar> _answers1;

                [Getter, Setter]
                private Bar<T>[] _answers2;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial struct Foo<T>
                {
                    public global::System.Collections.Generic.IReadOnlyList<global::Macaron.PropertyAccessor.Tests.Bar> Answers1
                    {
                        get => _answers1;
                        set => _answers1 = value;
                    }

                    public global::Macaron.PropertyAccessor.Tests.Bar<T>[] Answers2
                    {
                        get => _answers2;
                        set => _answers2 = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_NotGenerateSetter_When_FieldIsReadOnly()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial record Foo
            {
                [Getter, Setter]
                private readonly int _answer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial record Foo
                {
                    public int Answer
                    {
                        get => _answer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateProperties_Using_CustomAccessModifierPrefixAndNamingRule()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(accessModifier: PropertyAccessModifier.Protected, prefix: "m", namingRule: PropertyNamingRule.CamelCase)]
            public partial class Foo
            {
                [Getter]
                public int mAnswer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    protected int answer
                    {
                        get => mAnswer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_OverrideClassLevelSettings_With_FieldLevelAutoPropertySettings()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(accessModifier: PropertyAccessModifier.Protected, prefix: "m", namingRule: PropertyNamingRule.CamelCase)]
            public partial class Foo
            {
                [AutoProperty(prefix: "_"), Getter]
                public string _bar = "bar";

                [AutoProperty(accessModifier: PropertyAccessModifier.Private, prefix: "m_", namingRule: PropertyNamingRule.PascalCase), Getter, Setter]
                public int m_answer = 42;

                [Getter]
                public int mAnswer = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    protected string bar
                    {
                        get => _bar;
                    }

                    private int Answer
                    {
                        get => m_answer;
                        set => m_answer = value;
                    }

                    protected int answer
                    {
                        get => mAnswer;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateGetter_When_FieldTypeIsIReadOnlyProperty()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly IReadOnlyProperty<int> _answer1 = null!;
                private readonly IReadOnlyProperty<Foo, int> _answer2 = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1.Get(this);
                    }

                    public int Answer2
                    {
                        get => _answer2.Get(this);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateGetterAndSetter_When_FieldTypeIsIReadWriteProperty()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly IReadWriteProperty<int> _answer1 = null!;
                private readonly IReadWriteProperty<Foo, int> _answer2 = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => _answer1.Get(this);
                        set => _answer1.Set(this, value);
                    }

                    public int Answer2
                    {
                        get => _answer2.Get(this);
                        set => _answer2.Set(this, value);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_NotGenerateProperty_When_IReadOnlyPropertyFieldIsNotReadonly()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private IReadOnlyProperty<int> _wrongAnswer = null!;
                private readonly IReadOnlyProperty<int> _answer = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer.Get(this);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_NotGenerateProperty_When_IReadWritePropertyFieldIsNotReadonly()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private IReadWriteProperty<int> _wrongAnswer = null!;
                [Getter, Setter]
                private readonly IReadWriteProperty<int> _answer = null!;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer.Get(this);
                        set => _answer.Set(this, value);
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_ReportDiagnostic_When_GeneratedPropertyNameIsEmpty()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly int _ = null!;
            }
            """,
            expected: "",
            out var diagnostics
        );

        Assert.That(diagnostics, Has.Some.Matches<Diagnostic>(diagnostic => diagnostic.Id == "MAPA0005"));
    }

    [Test]
    public void Should_ReportDiagnostic_When_GeneratedPropertyNameConflictsWithFieldName()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                private readonly int Answer = null!;
            }
            """,
            expected: "",
            out var diagnostics
        );

        Assert.That(diagnostics, Has.Some.Matches<Diagnostic>(diagnostic => diagnostic.Id == "MAPA0006"));
    }

    [Test]
    public void Should_ReportError_When_ClassLevelPrefixRegexIsInvalid()
    {
         AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(prefix: "[invalid")]
            public partial class Foo
            {
                [Getter]
                private int _answer = 42;
            }
            """,
            expected: "",
            out var diagnostics
        );

        Assert.That(diagnostics, Has.Some.Matches<Diagnostic>(diagnostic =>
            diagnostic.Id == "MAPA0007" &&
            diagnostic.GetMessage().Contains("[invalid")
        ));
    }

    [Test]
    public void Should_ReportError_When_FieldLevelPrefixRegexIsInvalid()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Foo
            {
                [AutoProperty(prefix: "*+invalid"), Getter]
                private int _answer = 42;
            }
            """,
            expected: "",
            out var diagnostics
        );

        Assert.That(diagnostics, Has.Some.Matches<Diagnostic>(diagnostic =>
            diagnostic.Id == "MAPA0007" &&
            diagnostic.GetMessage().Contains("*+invalid")
        ));
    }

    [Test]
    public void Should_UseDefaultPrefix_When_ClassLevelPrefixIsEmpty()
    {
        AssertGeneratedCode(sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(prefix: "")]
            public partial class Foo
            {
                [Getter]
                private int _answer = 42;
            }
            """,
            expected:

            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer
                    {
                        get => _answer;
                    }
                }
            }

            """,
            out var diagnostics
        );

        Assert.That(diagnostics, Has.None.Matches<Diagnostic>(diagnostic => diagnostic.Severity == DiagnosticSeverity.Error));
    }

    [Test]
    public void Should_GeneratePropertiesCorrectly_When_UsingComplexPrefixRegexPatterns()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty(prefix: @"^(m_|_|s_)")]
            public partial class Foo
            {
                [Getter]
                private int m_answer1 = 42;

                [Getter]
                private int _answer2 = 42;

                [Getter]
                private static int s_answer3 = 42;

                [Getter]
                private int normalField = 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Foo
                {
                    public int Answer1
                    {
                        get => m_answer1;
                    }

                    public int Answer2
                    {
                        get => _answer2;
                    }

                    public int Answer3
                    {
                        get => s_answer3;
                    }

                    public int NormalField
                    {
                        get => normalField;
                    }
                }
            }

            """,
            out var diagnostics
        );

        Assert.That(diagnostics, Has.None.Matches<Diagnostic>(diagnostic => diagnostic.Id == "PA0007"));
    }

    [Test]
    public void Should_NotApplyAutoProperty_To_NestedTypes_ByDefault()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class Outer
            {
                [Getter]
                private int _outerField = 1;

                public partial class Inner
                {
                    [Getter]
                    private int _innerField = 2;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Outer
                {
                    public int OuterField
                    {
                        get => _outerField;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_ApplyAutoProperty_When_NestedTypeIsExplicitlyMarked()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            public partial class Outer
            {
                private int _outerField = 1;

                [AutoProperty]
                public partial class Inner
                {
                    [Getter]
                    private int _innerField = 2;
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class Outer
                {
                    partial class Inner
                    {
                        public int InnerField
                        {
                            get => _innerField;
                        }
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateProperties_When_GenericTypeConstraintsAreApplied()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System;
            using System.Collections.Generic;

            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class GenericClass<T, U>
                where T : class, IComparable<T>
                where U : struct
            {
                [Getter, Setter]
                private T _item;

                [Getter]
                private readonly U _value;

                [Getter, Setter]
                private List<T> _items;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class GenericClass<T, U>
                {
                    public T Item
                    {
                        get => _item;
                        set => _item = value;
                    }

                    public U Value
                    {
                        get => _value;
                    }

                    public global::System.Collections.Generic.List<T> Items
                    {
                        get => _items;
                        set => _items = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateProperties_When_FieldsHaveNestedGenericOrTupleTypes()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            using System;
            using System.Collections.Generic;

            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class ComplexGenericClass<T>
            {
                [Getter, Setter]
                private Dictionary<string, List<T>> _complexField;

                [Getter]
                private readonly Func<T, bool> _predicate;

                [Getter, Setter]
                private (int id, T value) _tupleField;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class ComplexGenericClass<T>
                {
                    public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<T>> ComplexField
                    {
                        get => _complexField;
                        set => _complexField = value;
                    }

                    public global::System.Func<T, bool> Predicate
                    {
                        get => _predicate;
                    }

                    public (int id, T value) TupleField
                    {
                        get => _tupleField;
                        set => _tupleField = value;
                    }
                }
            }

            """
        );
    }

    [Test]
    public void Should_GenerateProperties_When_FieldNamesContainSpecialCharacters()
    {
        AssertGeneratedCode(
            sourceCode:
            """
            namespace Macaron.PropertyAccessor.Tests;

            [AutoProperty]
            public partial class SpecialCharacterClass
            {
                [Getter]
                private int @class = 1;

                [Getter]
                private string _ünicodeField = "";

                [Getter]
                private bool _field123 = false;

                [Getter]
                private double __doubleUnderscore1 = 0.0;

                [AutoProperty(prefix: "_*"), Getter]
                private double __doubleUnderscore2 = 0.0;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.PropertyAccessor.Tests
            {
                partial class SpecialCharacterClass
                {
                    public int Class
                    {
                        get => @class;
                    }

                    public string ÜnicodeField
                    {
                        get => _ünicodeField;
                    }

                    public bool Field123
                    {
                        get => _field123;
                    }

                    public double _doubleUnderscore1
                    {
                        get => __doubleUnderscore1;
                    }

                    public double DoubleUnderscore2
                    {
                        get => __doubleUnderscore2;
                    }
                }
            }

            """
        );
    }
}
